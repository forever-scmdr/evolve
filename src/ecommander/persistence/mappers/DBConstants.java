/*
 * Created on 09.08.2007
 *
 * To change the template for this generated file go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
package ecommander.persistence.mappers;

/**
 * Содержит константы для всех таблиц, которые не генерятся динамически, 
 * и все остальные константы. которые нужны для работы с базоном
 * @author E
 *
 */
public class DBConstants
{

	/**************************************************************************************************
	 **                                 АЙТЕМЫ И ПАРАМЕТРЫ
	 **************************************************************************************************/
	
	/**
	 * Конкретный айтем
	 * Таблица служит в основном для генерации уникальных ID айтемов и для хранения родственных связей айтемов
	 * PK - TYPE_NAME и PARENT_ID, т. к. в разных разделах могут быть одинаковые сабайтемы
	 * 
	 * Есть два типа айтемов, обычные и ссылочные.
	 * Обычные айтемы имеют соответствующие записи в таблице парамтеров
	 * Айтемы-ссылки хранят ссылку на ID другого айтема. Таким образом, один и тот же айтем может участвовать в разных
	 * иерархиях (разных каталогах, отношениях parent-child)
	 * При создании нормального айтема REF_ID = ID
	 * REF_ID всегда используется для объединения с таблицами парамтеров и таблицами сабайтемов (т. к. ссылки сами по себе не содержат сабайтемы)
	 * ID используется для удаления айтема
	 * 
	 * @author E
	 */
	public interface Item
	{
		String TABLE = "item";
		String ID = "i_id"; // ID айтема (не типа айтема, а конкретного айтема)
		String TYPE_ID = "i_type_id"; // уникальный ID типа айтема (PK)
		String KEY = "i_key"; // Название айтема, которое юзер видит в CMS
		String TRANSLIT_KEY = "i_t_key"; // Уникальный ключ айтема, который можно испльзовать для поиска вместо ID
		String INDEX_WEIGHT = "i_weight"; // порядковый номер (вес с разницей 64 по умолчаню) в списке всех потомков одного родителя (для сортировки)
		String PARAMS = "i_params"; // значения всех параметров айтема в виде XML
		String UPDATED = "i_updated"; // время последнего обновления айтема
	}

	/**
	 * Таблица, в которой хранится описание модели данных в виде XML
	 */
	public interface ModelXML {
		String TABLE = "model_xml";
		String NAME = "xml_name";
		String XML = "xml_xml";
	}
	/**
	 * Уникальные строковые ключи некоторых айтемов, которые можно передавать через URL с целью уникальной идентификации айтема
	 * @author E
	 *
	 */
	public interface UniqueItemKeys {
		String TABLE = "unique_key";
		String ID = "uk_item_id"; // ID айтема
		String KEY = "uk_key"; // Уникальный текстовый ключ
	}
	/**
	 * Таблица, в которой хранятся пары родитель-потомок для всех возможных комбинаций айтемов родителей и айтемов потомков
	 * @author EEEE
	 *
	 */
	public interface ItemParent {
		String TABLE = "item_parent";
		String REF_ID = "ip_ref_id";
		String PARENT_ID = "ip_parent_id";
		String ITEM_ID = "ip_item_id";
		String ITEM_TYPE = "ip_type"; // Тип айтема
		String PARENT_LEVEL = "ip_level"; // Уровень вложенности по отношению к предку
	}
	/**
	 * Параметры айтема
	 * 
	 * Всего есть 4 таблицы, по одной для каждого типа значений: строка, целое число, дробное число, ассоциация
	 * В этих таблицах поля называются одинаково, различается только название таблицы
	 * 
	 * ID айтема должен быть одинаковым во всех таблицах, в которых используется этот айтем
	 * Таблица хранит все значения всех параметров типа Integet и Long всех айтемов и используется только при поиске по фильтру 
	 * или при сортировке по значению параметра
	 * @author EEEE
	 * TODO <enhance> !!! Использовать в запросах фильтрации II_TYPE - меньше элементов остается после выбора из этой таблицы
	 */
	public interface ItemIndexes {
		String INT_TABLE_NAME = "int_index";
		String DOUBLE_TABLE_NAME = "double_index";
		String STRING_TABLE_NAME = "string_index";
		String ASSOCIATED_TABLE_NAME = "assoc_index";
		String REF_ID = "ii_ref_id"; // ID айтема (не типа айтема, а конкретного айтема)
		String ITEM_PARAM = "ii_param"; // ID параметра айтема (каждый параметр имеет уникальный ID вне зависимости от уникальности его названия)
		String ITEM_TYPE = "ii_type"; // ID типа айтема
		String ITEM_PARENT = "ii_parent"; // ID прямого родителя айтема
		String VALUE = "ii_val"; // Занчение (одн
	}
	/**
	 * Таблица, в которой хранятся ID всех ассоциаций
	 * Она нужна для того, чтобы генерировать уникальные ID для ассоциаций
	 * @author E
	 *
	 */
	public interface AssocIds {
		String TABLE = "assoc_ids";
		String ASSOC_NAME = "aid_name";
		String ASSOC_ID = "aid_id";
	}
	/**
	 * Таблица, в которой хранятся ID всех айтемов
	 * Она нужна для того, чтобы генерировать уникальные ID для айтемов
	 * @author E
	 *
	 */
	public interface ItemIds {
		String TABLE = "item_ids";
		String ITEM_NAME = "iid_name";
		String ITEM_ID = "iid_id";
	}
	/**
	 * Таблица, в которой хранятся ID всех айтемов
	 * Она нужна для того, чтобы генерировать уникальные ID для айтемов
	 * @author E
	 *
	 */
	public interface ParamIds {
		String TABLE = "param_ids";
		String ITEM_ID = "pid_item_id";
		String PARAM_NAME = "pid_param_name";
		String PARAM_ID = "pid_param_id";
	}
	/**************************************************************************************************
	 **                                        СТРАНИЦЫ
	 **************************************************************************************************/
	
	/**
	 * Для страниц нет таблиц в базе.
	 * Структура страниц берется из XML файла при старте сервера и кэшируется в 
	 * оперативной памяти в виде специальных объектов
	 */
	
	
//	/**************************************************************************************************
//	 **                                        Домены
//	 **************************************************************************************************/
//	
//	/**
//	 * Таблицы для доменов. Так как они отвечают только
//	 * за представление информации и удобство пользователя и не участвуют в процессах бизнес логики, то расположены отдельно. 
//	 */
//
//	/**
//	 * Таблица доменов без значений
//	 * @author E
//	 */
//	public interface DomainAbstract
//	{
//		String TABLE = "DomainAbstract";
//		String NAME = "D_NAME"; // уникальное имя домена
//		String FORMAT = "D_FORMAT"; // формат домена, аналогично формату параметра. 
//									// Нужен, т. к. домен иногда будет выводиться независимо от айтемов (в админке, например)
//		String VIEW = "D_VIEW"; // Вид, в котором выводится домен (комбобокс, чекбокс, радиогруп)
//	}
//
//	/**
//	 * Поскольку использовать домены будет только пользователь (они нужны только для удобства пользователя и в логике не участвуют),
//	 * значения любых типов данных хранятся в виде строки
//	 * @author E
//	 */
//	public interface DomainValues
//	{
//		String TABLE = "DomainValues";
//		String DOMAIN_NAME = "DV_DOMAIN_NAME"; // название домена
//		String VALUE = "DV_VALUE"; // значение домена
//		String INDEX = "DV_INDEX"; // порядковый номер значения домена
//	}

	/**************************************************************************************************
	 **                                        ЮЗЕРЫ
	 **************************************************************************************************/

	/**
	 * Для юзеров тоже надо делать отдельный файл, так же как и для айтемов и старниц.
	 * Всего получается 3 настроечных файла - юзеры, айтемы и страницы.
	 * В файле юзеров определяются группы, айтемы, которые могут просматривать либо редактировать эти группы
	 * и юзеры, которые входят в эти группы
	 * @author E
	 */

	/**
	 * Группы пользователей
	 * @author E
	 */
	public interface UserGroup
	{
		String TABLE = "user_group";
		String ID = "ug_id";
		String NAME = "ug_name";
	}
	
	/**
	 * Таблица юзеров и их принадлежность к группам
	 * @author E
	 */
	public interface Users
	{
		String TABLE = "uers";
		String ID = "u_id";
		String GROUP = "u_group";
		String LOGIN = "u_login";
		String PASSWORD = "u_password";
		String DESCRIPTION = "u_description";
	}
	
//	/**
//	 * Таблица разрешений на каждый айтем, доступ к которому отличается от доступа по умолчанию
//	 * !!! НА БУДУЩЕЕ !!!
//	 * @author E
//	 */
//	public interface Permissions
//	{
//		String TABLE = "Permissions";
//		String ITEM_TYPE_ID = "S_ITEM_TYPE_ID";
//		String GROUP = "S_GROUP";
//		String PERMISSION = "S_PERMISSION"; // может быть только READ или WRITE. По умолчанию все айтемы только READ.
//	}
//	
}